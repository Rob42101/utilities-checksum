#! /usr/bin/env python3
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 7.6
#  in conjunction with Tcl version 8.6
#    Dec 08, 2023 11:48:56 AM GMT  platform: Linux

import sys
import tkinter as tk
import tkinter.ttk as ttk
from tkinter.constants import *
import os.path

_script = sys.argv[0]
_location = os.path.dirname(_script)

import checksum_support

_bgcolor = '#d9d9d9'  # X11 color: 'gray85'
_fgcolor = '#000000'  # X11 color: 'black'
_compcolor = 'gray40' # X11 color: #666666
_ana1color = '#c3c3c3' # Closest X11 color: 'gray76'
_ana2color = 'beige' # X11 color: #f5f5dc
_tabfg1 = 'black' 
_tabfg2 = 'black' 
_tabbg1 = 'grey75' 
_tabbg2 = 'grey89' 
_bgmode = 'light' 

class Toplevel1:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''

        top.geometry("700x235+329+266")
        top.minsize(1, 1)
        top.maxsize(1351, 738)
        top.resizable(0,  0)
        top.title("File Checksum v1.0")
        top.configure(background="#0B2138")
        top.configure(highlightbackground="#313338")
        top.configure(highlightcolor="#313338")

        self.top = top
        self.text_file_path = tk.StringVar()
        self.text_file_attributes = tk.StringVar()
        self.text_hash_digest = tk.StringVar()
        self.text_w_dir = tk.StringVar()
        self.text_selected_hash = tk.IntVar()

        self.ButtonBox = tk.Frame(self.top)
        self.ButtonBox.place(x=580, y=195, height=40, width=110)
        self.ButtonBox.configure(relief='flat')
        self.ButtonBox.configure(borderwidth="2")
        self.ButtonBox.configure(background="#0B2138")
        self.ButtonBox.configure(cursor="arrow")
        self.ButtonBox.configure(highlightbackground="#313338")
        self.ButtonBox.configure(highlightcolor="#313338")
        self.Verify = tk.Button(self.ButtonBox)
        self.Verify.place(x=40, y=5, height=30, width=30)
        self.Verify.configure(activebackground="#0B2138")
        self.Verify.configure(background="#0B2138")
        self.Verify.configure(borderwidth="0")
        self.Verify.configure(command=checksum_support.verify)
        self.Verify.configure(compound='left')
        self.Verify.configure(cursor="arrow")
        self.Verify.configure(highlightbackground="#0B2138")
        photo_location = os.path.join(_location,"./icons/verify.png")
        global _img0
        _img0 = tk.PhotoImage(file=photo_location)
        self.Verify.configure(image=_img0)
        self.File = tk.Button(self.ButtonBox)
        self.File.place(x=5, y=5, height=30, width=30)
        self.File.configure(activebackground="#0B2138")
        self.File.configure(background="#0B2138")
        self.File.configure(borderwidth="0")
        self.File.configure(command=checksum_support.file_open)
        self.File.configure(compound='left')
        self.File.configure(cursor="arrow")
        self.File.configure(highlightbackground="#0B2138")
        photo_location = os.path.join(_location,"./icons/files.png")
        global _img1
        _img1 = tk.PhotoImage(file=photo_location)
        self.File.configure(image=_img1)
        self.Quit = tk.Button(self.ButtonBox)
        self.Quit.place(x=75, y=5, height=30, width=30)
        self.Quit.configure(activebackground="#0B2138")
        self.Quit.configure(background="#0B2138")
        self.Quit.configure(borderwidth="0")
        self.Quit.configure(command=checksum_support.quit)
        self.Quit.configure(compound='left')
        self.Quit.configure(cursor="arrow")
        self.Quit.configure(highlightbackground="#0B2138")
        photo_location = os.path.join(_location,"./icons/quit.png")
        global _img2
        _img2 = tk.PhotoImage(file=photo_location)
        self.Quit.configure(image=_img2)
        self.file_objects = tk.Frame(self.top)
        self.file_objects.place(x=1, y=0, height=61, width=696)
        self.file_objects.configure(relief='groove')
        self.file_objects.configure(borderwidth="2")
        self.file_objects.configure(relief="groove")
        self.file_objects.configure(background="#0B2138")
        self.file_objects.configure(cursor="arrow")
        self.file_objects.configure(highlightcolor="#d9d9d9")
        self.name_Path = tk.Label(self.file_objects)
        self.name_Path.place(x=5, y=5, height=25, width=80)
        self.name_Path.configure(activebackground="#0093dd")
        self.name_Path.configure(activeforeground="white")
        self.name_Path.configure(anchor='w')
        self.name_Path.configure(background="#0B2138")
        self.name_Path.configure(compound='left')
        self.name_Path.configure(font="-family {DejaVu Sans} -size 12")
        self.name_Path.configure(foreground="#689FDC")
        self.name_Path.configure(text='''Path:''')
        self.file_path = tk.Label(self.file_objects)
        self.file_path.place(x=50, y=5, height=25, width=640)
        self.file_path.configure(activebackground="#f9f9f9")
        self.file_path.configure(anchor='w')
        self.file_path.configure(background="#0B2138")
        self.file_path.configure(compound='left')
        self.file_path.configure(font="-family {DejaVu Sans} -size 12")
        self.file_path.configure(foreground="#689fdc")
        self.file_path.configure(textvariable=self.text_file_path)
        self.text_file_path.set('''''')
        self.attributes = tk.Label(self.file_objects)
        self.attributes.place(x=5, y=30, height=25, width=300)
        self.attributes.configure(activebackground="#f9f9f9")
        self.attributes.configure(anchor='w')
        self.attributes.configure(background="#0B2138")
        self.attributes.configure(compound='left')
        self.attributes.configure(font="-family {DejaVu Sans} -size 12")
        self.attributes.configure(foreground="#689fdc")
        self.attributes.configure(textvariable=self.text_file_attributes)
        self.text_file_attributes.set('''''')
        self.hash_digest_object = tk.Frame(self.top)
        self.hash_digest_object.place(x=1, y=60, height=75, width=695)
        self.hash_digest_object.configure(relief='groove')
        self.hash_digest_object.configure(borderwidth="2")
        self.hash_digest_object.configure(relief="groove")
        self.hash_digest_object.configure(background="#0B2138")
        self.hash_digest_object.configure(cursor="arrow")
        self.hash_digest = tk.Label(self.hash_digest_object)
        self.hash_digest.place(x=5, y=5, height=60, width=684)
        self.hash_digest.configure(activebackground="#f9f9f9")
        self.hash_digest.configure(anchor='nw')
        self.hash_digest.configure(background="#0B2138")
        self.hash_digest.configure(compound='left')
        self.hash_digest.configure(font="-family {DejaVu Sans} -size 12")
        self.hash_digest.configure(foreground="#44ad4d")
        self.hash_digest.configure(justify='left')
        self.hash_digest.configure(textvariable=self.text_hash_digest)
        self.text_hash_digest.set('''''')
        self.hash_digest.configure(wraplength="680")
        self.published_hash_object = tk.Frame(self.top)
        self.published_hash_object.place(x=1, y=134, height=60, width=695)
        self.published_hash_object.configure(relief='groove')
        self.published_hash_object.configure(borderwidth="2")
        self.published_hash_object.configure(relief="groove")
        self.published_hash_object.configure(background="#204a87")
        self.published_hash_entry = tk.Text(self.published_hash_object)
        self.published_hash_entry.place(x=5, y=5, height=48, width=685)
        self.published_hash_entry.configure(background="#204A87")
        self.published_hash_entry.configure(font="-family {DejaVu Sans} -size 12")
        self.published_hash_entry.configure(foreground="#babdb6")
        self.published_hash_entry.configure(highlightbackground="#204a87")
        self.published_hash_entry.configure(highlightcolor="#204a87")
        self.published_hash_entry.configure(inactiveselectbackground="#20a487")
        self.published_hash_entry.configure(selectbackground="#313338")
        self.published_hash_entry.configure(selectborderwidth="")
        self.published_hash_entry.configure(selectforeground="#babdb6")
        self.published_hash_entry.configure(wrap="word")
        self.published_hash_entry_tooltip = \
        ToolTip(self.published_hash_entry, '''Enter the published hash value''')

        self.TRariobuttonBox_1 = tk.Frame(self.top)
        self.TRariobuttonBox_1.place(x=110, y=66, height=24, width=288)
        self.TRariobuttonBox_1.configure(relief='flat')
        self.TRariobuttonBox_1.configure(borderwidth="2")
        self.TRariobuttonBox_1.configure(background="#0B2138")
        self.Radiobutton1 = tk.Radiobutton(self.TRariobuttonBox_1)
        self.Radiobutton1.place(x=0, y=0, height=20, width=70)
        self.Radiobutton1.configure(activebackground="#0B2138")
        self.Radiobutton1.configure(activeforeground="#babdb6")
        self.Radiobutton1.configure(background="#0B2138")
        self.Radiobutton1.configure(command=checksum_support.hash_gen)
        self.Radiobutton1.configure(compound='left')
        self.Radiobutton1.configure(font="-family {DejaVu Sans} -size 10")
        self.Radiobutton1.configure(foreground="#babdb6")
        self.Radiobutton1.configure(highlightbackground="#0B2138")
        self.Radiobutton1.configure(indicatoron="0")
        self.Radiobutton1.configure(justify='left')
        self.Radiobutton1.configure(selectcolor="#245701")
        self.Radiobutton1.configure(text='''MD5''')
        self.Radiobutton1.configure(value='0')
        self.Radiobutton1.configure(variable=self.text_selected_hash)
        self.Radiobutton2 = tk.Radiobutton(self.TRariobuttonBox_1)
        self.Radiobutton2.place(x=70, y=0, height=20, width=70)
        self.Radiobutton2.configure(activebackground="#0B2138")
        self.Radiobutton2.configure(activeforeground="#babdb6")
        self.Radiobutton2.configure(background="#0B2138")
        self.Radiobutton2.configure(command=checksum_support.hash_gen)
        self.Radiobutton2.configure(compound='left')
        self.Radiobutton2.configure(font="-family {DejaVu Sans} -size 10")
        self.Radiobutton2.configure(foreground="#babdb6")
        self.Radiobutton2.configure(highlightbackground="#0B2138")
        self.Radiobutton2.configure(indicatoron="0")
        self.Radiobutton2.configure(justify='left')
        self.Radiobutton2.configure(selectcolor="#245701")
        self.Radiobutton2.configure(text='''SHA-1''')
        self.Radiobutton2.configure(value='1')
        self.Radiobutton2.configure(variable=self.text_selected_hash)
        self.Radiobutton3 = tk.Radiobutton(self.TRariobuttonBox_1)
        self.Radiobutton3.place(x=140, y=0, height=20, width=70)
        self.Radiobutton3.configure(activebackground="#0B2138")
        self.Radiobutton3.configure(activeforeground="#babdb6")
        self.Radiobutton3.configure(background="#0B2138")
        self.Radiobutton3.configure(command=checksum_support.hash_gen)
        self.Radiobutton3.configure(compound='left')
        self.Radiobutton3.configure(font="-family {DejaVu Sans} -size 10")
        self.Radiobutton3.configure(foreground="#BABDB6")
        self.Radiobutton3.configure(highlightbackground="#0B2138")
        self.Radiobutton3.configure(indicatoron="0")
        self.Radiobutton3.configure(justify='left')
        self.Radiobutton3.configure(selectcolor="#245701")
        self.Radiobutton3.configure(text='''SHA-256''')
        self.Radiobutton3.configure(value='2')
        self.Radiobutton3.configure(variable=self.text_selected_hash)
        self.Radiobutton4 = tk.Radiobutton(self.TRariobuttonBox_1)
        self.Radiobutton4.place(x=210, y=0, height=20, width=70)
        self.Radiobutton4.configure(activebackground="#0B2138")
        self.Radiobutton4.configure(activeforeground="#babdb6")
        self.Radiobutton4.configure(background="#0B2138")
        self.Radiobutton4.configure(command=checksum_support.hash_gen)
        self.Radiobutton4.configure(compound='left')
        self.Radiobutton4.configure(font="-family {DejaVu Sans} -size 10")
        self.Radiobutton4.configure(foreground="#BABDB6")
        self.Radiobutton4.configure(highlightbackground="#0B2138")
        self.Radiobutton4.configure(indicatoron="0")
        self.Radiobutton4.configure(justify='left')
        self.Radiobutton4.configure(selectcolor="#245701")
        self.Radiobutton4.configure(text='''SHA-512''')
        self.Radiobutton4.configure(value='3')
        self.Radiobutton4.configure(variable=self.text_selected_hash)
        self.Config = tk.Button(self.top)
        self.Config.place(x=10, y=200, height=30, width=30)
        self.Config.configure(activebackground="#0B2138")
        self.Config.configure(background="#0B2138")
        self.Config.configure(borderwidth="0")
        self.Config.configure(command=checksum_support.config)
        self.Config.configure(compound='left')
        self.Config.configure(cursor="arrow")
        self.Config.configure(highlightbackground="#0B2138")
        photo_location = os.path.join(_location,"./icons/config.png")
        global _img3
        _img3 = tk.PhotoImage(file=photo_location)
        self.Config.configure(image=_img3)
        self.working_dir = tk.Label(self.top)
        self.working_dir.place(x=45, y=203, height=25, width=500)
        self.working_dir.configure(activebackground="#f9f9f9")
        self.working_dir.configure(anchor='w')
        self.working_dir.configure(background="#0B2138")
        self.working_dir.configure(compound='left')
        self.working_dir.configure(foreground="#689fdc")
        self.working_dir.configure(textvariable=self.text_w_dir)
        self.text_w_dir.set('''''')

from time import time, localtime, strftime
class ToolTip(tk.Toplevel):
    """ Provides a ToolTip widget for Tkinter. """
    def __init__(self, wdgt, msg=None, msgFunc=None, delay=0.5,
                 follow=True):
        self.wdgt = wdgt
        self.parent = self.wdgt.master
        tk.Toplevel.__init__(self, self.parent, bg='black', padx=1, pady=1)
        self.withdraw()
        self.overrideredirect(True)
        self.msgVar = tk.StringVar()
        if msg is None:
            self.msgVar.set('No message provided')
        else:
            self.msgVar.set(msg)
        self.msgFunc = msgFunc
        self.delay = delay
        self.follow = follow
        self.visible = 0
        self.lastMotion = 0
        self.msg = tk.Message(self, textvariable=self.msgVar, bg=_bgcolor,
                   fg=_fgcolor, font="TkDefaultFont",
                   aspect=1000)
        self.msg.grid()
        self.wdgt.bind('<Enter>', self.spawn, '+')
        self.wdgt.bind('<Leave>', self.hide, '+')
        self.wdgt.bind('<Motion>', self.move, '+')
    def spawn(self, event=None):
        self.visible = 1
        self.after(int(self.delay * 1000), self.show)
    def show(self):
        if self.visible == 1 and time() - self.lastMotion > self.delay:
            self.visible = 2
        if self.visible == 2:
            self.deiconify()
    def move(self, event):
        self.lastMotion = time()
        if self.follow is False:
            self.withdraw()
            self.visible = 1
        self.geometry('+%i+%i' % (event.x_root + 20, event.y_root - 10))
        try:
            self.msgVar.set(self.msgFunc())
        except:
            pass
        self.after(int(self.delay * 1000), self.show)
    def hide(self, event=None):
        self.visible = 0
        self.withdraw()
    def update(self, msg):
        self.msgVar.set(msg)
    def configure(self, **kwargs):
        backgroundset = False
        foregroundset = False
        # Get the current tooltip text just in case the user doesn't provide any.
        current_text = self.msgVar.get()
        # to clear the tooltip text, use the .update method
        if 'debug' in kwargs.keys():
            debug = kwargs.pop('debug', False)
            if debug:
                for key, value in kwargs.items():
                    print(f'key: {key} - value: {value}')
        if 'background' in kwargs.keys():
            background = kwargs.pop('background')
            backgroundset = True
        if 'bg' in kwargs.keys():
            background = kwargs.pop('bg')
            backgroundset = True
        if 'foreground' in kwargs.keys():
            foreground = kwargs.pop('foreground')
            foregroundset = True
        if 'fg' in kwargs.keys():
            foreground = kwargs.pop('fg')
            foregroundset = True

        fontd = kwargs.pop('font', None)
        if 'text' in kwargs.keys():
            text = kwargs.pop('text')
            if (text == '') or (text == "\n"):
                text = current_text
            else:
                self.msgVar.set(text)
        reliefd = kwargs.pop('relief', 'flat')
        justifyd = kwargs.pop('justify', 'left')
        padxd = kwargs.pop('padx', 1)
        padyd = kwargs.pop('pady', 1)
        borderwidthd = kwargs.pop('borderwidth', 2)
        wid = self.msg      # The message widget which is the actual tooltip
        if backgroundset:
            wid.config(bg=background)
        if foregroundset:
            wid.config(fg=foreground)
        wid.config(font=fontd)
        wid.config(borderwidth=borderwidthd)
        wid.config(relief=reliefd)
        wid.config(justify=justifyd)
        wid.config(padx=padxd)
        wid.config(pady=padyd)
#                   End of Class ToolTip

def start_up():
    checksum_support.main()

if __name__ == '__main__':
    checksum_support.main()




